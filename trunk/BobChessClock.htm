<html>
<!--
http://code.google.com/p/bobchess/
Copyright (C) 2008, 2009 James (james at doubtlesshouse dot org dot uk)

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.

Revision $Revision$ checked in $Date$
                                                            -->

<head>
<title>Bob The Chess Clock</title>
<style type="text/css">
h1 { text-align: center; font-family: sans-serif; }
div#start { width: 70%; margin: 0px auto; }
fieldset { padding: 10px; }
</style>
<script>
var LastTouch;
var players;
var moving;
// pointer to timer that updates screen so it can be stopped later
var timer;
var fischerSecs;
var fischerBefore;
var fischerAfter;
var timeWarningSecs;
var bronsteinSecs;
var simpleDelaySecs;
var keyboardLayout = "uk-qwerty";

function stopTimer() {
	if (timer == undefined) return;
	clearInterval(timer);
	timer = undefined;
}

function init() {
	// in case we are half way throught a game now, stop the various code stuff
	stopTimer();
	document.onkeyup = keyDoNothing;
	// display proper screen
	document.getElementById('start').style.display = 'block';
        document.getElementById('nojs').style.display = 'none';
        document.getElementById('play').style.display = 'none';
	// holds the time the currently running clock started
	LastTouch = false;
	// holds how much time each player has left in milliseconds
	players = new Array(0,0);
	// current state, -1 before start, -2 all over, 0 or 1: player moving
	moving = -1;
	// fischer mode
	fischerSecs = 0;
	fischerBefore = false;
	fischerAfter = false;
	// bronstein mode
	bronsteinSecs = 0;
	// simple delay mode
	simpleDelaySecs = 0;	
	// warn by turning clocks red when there a certain number of seconds left, 0 to disable.
	timeWarningSecs = 0;
	// set ui to normal colours and size
	document.getElementById('player1').style.color = 'white';
	document.getElementById('player2').style.color = 'black';
	document.getElementById('player1').style.fontSize='300%';
	document.getElementById('player2').style.fontSize='300%';
}

function startMatch() {
	// storing prefs in cookies as we go so we can load them later .......
	// calculate start time
	var time = Math.max(0,parseInt(document.getElementById('Hrs').value))*60*60 
		+ Math.max(0,parseInt(document.getElementById('Mins').value))*60
		+ Math.max(0,parseInt(document.getElementById('Secs').value));
	if (isNaN(time)) {
		alert('We could not parse the time you requested as a recognised number. Please try again.');
		return;
	}
	if (time < 1) {
		alert('You must set some time on the clocks. Please try again.');
		return;
	}
	setCookie('time',time);
	players[0] = time * 1000;
	players[1] = time * 1000;

	if (document.getElementById('DiffStartTimes').checked) {
		var timerhp = Math.max(0,parseInt(document.getElementById('HrsRHP').value))*60*60
			+ Math.max(0,parseInt(document.getElementById('MinsRHP').value))*60
			+ Math.max(0,parseInt(document.getElementById('SecsRHP').value));
		if (isNaN(timerhp)) {
			alert('We could not parse the time you requested as a recognised number. Please try again.');
			return;
		}
		if (timerhp < 1) {
			alert('You must set some time for the right hand player. Please try again.');
			return;
		}
		players[1] = timerhp * 1000;
		setCookie('diffTimes','y');
		setCookie('timeRHP',timerhp);
	} else {
		setCookie('diffTimes','n');
		setCookie('timeRHP',0);
	}

	// Fischer options
	if (document.getElementById('Fischer').checked) {
		fischerSecs = Math.max(0,parseInt(document.getElementById('FischerSecs').value));
		if (isNaN(fischerSecs)) {
			alert('We could not parse the number of seconds you requested for Fischer mode as a recognised number. Please try again.');
			return;
		}
		setCookie('fischerSecs',fischerSecs);
		var ele = document.getElementById('FischerMode');
		if (ele.options[ele.selectedIndex].value == "0") { 
			fischerBefore = true; 
			setCookie('fischer','before');
		} else { 
			fischerAfter = true; 
			setCookie('fischer','after');
		}
	} else { 
		fischerSecs = 0; 
		setCookie('fischer','none');
	}

	// Bronstein
	if (document.getElementById('Bronstein').checked) {
		bronsteinSecs = Math.max(0,parseInt(document.getElementById('BronsteinSecs').value));
		if (isNaN(bronsteinSecs)) {
			alert('We could not parse the number of seconds you requested for Bronstein mode as a recognised number. Please try again.');
			return;
		}
		setCookie('bronsteinSecs',bronsteinSecs);
		setCookie('bronstein','on');
	} else {
		setCookie('bronstein','off');
		bronsteinSecs = 0;
	}

	// simpleDelaySeconds
        if (document.getElementById('SimpleDelay').checked) {
                simpleDelaySecs = Math.max(0,parseInt(document.getElementById('SimpleDelaySecs').value));
                if (isNaN(simpleDelaySecs)) {
                        alert('We could not parse the number of seconds you requested for Simple Delay mode as a recognised number. Please try again.');
                        return;
                }
                setCookie('simpleDelaySecs',simpleDelaySecs);
                setCookie('simpleDelay','on');
        } else {
                setCookie('simpleDelay','off');
                simpleDelaySecs = 0;
        }


	// Time Warning Options
	if (document.getElementById('TimeWarning').checked) {
		timeWarningSecs = Math.max(0,parseInt(document.getElementById('TimeWarningSecs').value));
		if (isNaN(timeWarningSecs)) {
                        alert('We could not parse the number of seconds you requested a warning at as a recognised number. Please try again.');
                        return;
		}
                setCookie('timeWarningSecs',timeWarningSecs);
                setCookie('timeWarning','on');
	} else { 
		timeWarningSecs = 0; 
		setCookie('timeWarning','off');
	}

	document.getElementById('start').style.display = 'none';
	document.getElementById('play').style.display = 'block';
	
	update();
}

function update() {
	var timenow = new Array(players[0],players[1]);
	if (moving == 0 || moving == 1) {
		var now = new Date();
		var diff = now.getTime() - LastTouch.getTime() - simpleDelaySecs*1000;
		if (diff < 0) diff = 0;
		timenow[moving] = timenow[moving] - diff;

		// the +1000 is so that the timer turns red on the time set, and not just when below the time set.
		if (timeWarningSecs > 0 && timenow[moving] < (timeWarningSecs * 1000 + 1000)) {
			document.getElementById('player'+(moving+1)).style.color = 'red';
		}
	}

	// if match has ended .......
	if (timenow[0] <= 0) { players[0] = 0; moving = -2; stopTimer(); }
	if (timenow[1] <= 0) { players[1] - 0; moving = -2; stopTimer(); }

	document.getElementById('player1').value = renderTime(timenow[0]);
	document.getElementById('player2').value = renderTime(timenow[1]);

}

function renderTime(milliseconds) {
	if (milliseconds < 1) { return 'Lose'; }
	var seconds = parseInt(milliseconds / 1000);
	if (seconds >= 60*60) {
		return parseInt(seconds / (60*60))+":"+zeropad((seconds / 60)%60)+":"+zeropad(seconds%60);
	} else if ( seconds >= 60) {
		return parseInt(seconds / 60)+":"+zeropad(seconds%60);
	} else {
		return parseInt(seconds);
	}
	return out;
}
function zeropad(innum) {
	if (innum < 10) { return "0"+parseInt(innum); } else { return parseInt(innum); }
}

function clickPlayer(player) {
	if (moving == -2) { return; }
	else if (player == moving) {
		// normal move
		// calculate diff, apply
		var now = new Date();
		var diff = now.getTime() - LastTouch.getTime() - simpleDelaySecs*1000;
		if (diff < 0) diff = 0;
		players[moving] = players[moving] - diff;
		// modes that add time after move
		if (bronsteinSecs > 0) players[moving] = players[moving] + Math.min(diff, bronsteinSecs*1000);
		else if (fischerAfter) players[moving] = players[moving] + fischerSecs * 1000;
		// switch players
		document.getElementById('player'+(moving+1)).style.fontSize='300%';
		if (player == 1 ) { moving = 0; } else { moving = 1; }
		document.getElementById('player'+(moving+1)).style.fontSize='800%';
		// modes that add time before a move
		if (fischerBefore) players[moving] = players[moving] + fischerSecs * 1000;
		// we may have now added enought time that we have to turn clocks from red back to original colour ...
		if (timeWarningSecs > 0) {
			if (players[0] >= (timeWarningSecs * 1000 + 1000)) document.getElementById('player1').style.color = 'white';
			if (players[1] >= (timeWarningSecs * 1000 + 1000)) document.getElementById('player2').style.color = 'black';
		}
		// set up for this move, and ui.
		LastTouch = new Date();
		update();
		if (moving == 0) { document.getElementById('player1').focus(); } else {  document.getElementById('player2').focus(); }
	} else if (moving == -1) {
		// we are starting the match
		document.onkeyup = key;
		moving = player;
		document.getElementById('player'+(moving+1)).style.fontSize='800%';
		if (fischerBefore) players[moving] = players[moving] + fischerSecs * 1000;
		timer = setInterval("update()",400);
		LastTouch = new Date();
		update();
	}
}

function key(e) {
	var k = (window.event) ? event.keyCode : e.keyCode;
	if (keyboardLayout == "uk-qwerty") {
		if (k == 49 || k == 50 || k == 51 || k == 52 || k == 53 || k == 81 || k == 113 || k == 87 || k == 119 || k == 69 || k == 101 || k == 84 || k == 116 || k == 65 || k == 97 || k == 83 || k == 115 || k == 68 || k == 100 || k == 70 || k == 102 || k == 71 || k == 103 || k == 90 || k == 122 || k == 88 || k == 120 || k == 67 || k == 99 || k == 86 || k == 118) {
			clickPlayer(0);
		} else if (k == 54 || k == 55 || k == 56 || k == 57 || k == 48 || k == 89 || k == 121 || k == 85 || k == 117 || k == 73 || k == 105 || k == 79 || k == 111 || k == 80 || k == 112 || k == 72 || k == 104 || k == 74 || k == 105 || k == 74 || k == 106 || k == 75 || k == 107 || k == 76 || k == 108 || k == 66 || k == 98 || k == 78 || k == 110 || k == 77 || k == 109) {
			clickPlayer(1);
		}
	} else if (keyboardLayout == "uk-dvorak") {
		if ( k == 49 || k == 50 || k == 51 || k == 52 || k == 53 || k == 39 || k == 44 || k == 46 || k == 112 || k == 80 || k == 121 || k == 89 || k == 97 || k == 65 || k == 111 || k == 79 || k == 101 || k == 69 || k == 117 || k == 85 || k == 105 || k == 73 || k == 59 || k == 113 || k == 81 || k == 106 || k == 74 || k == 107 || k == 75 || k == 120 || k == 88) {
			clickPlayer(0);
		} else if ( k == 54 || k == 55 || k == 56 || k == 57 || k == 48 || k == 102 || k == 70 || k == 103 || k == 71 || k == 99 || k == 67 || k == 114 || k == 82 || k == 108 || k == 76 || k == 47 || k == 61 || k == 100 || k == 68 || k == 104 || k == 72 || k == 116 || k == 84 || k == 110 || k == 78 || k == 115 || k == 83 || k == 45 || k == 98 || k == 66 || k == 109 || k == 77 || k == 119 || k == 87 || k == 118 || k == 86 || k == 122 || k == 90 || k == 91 || k == 93){
			clickPlayer(1);
		}
	}
}

function keyDoNothing(e) {}

function reset() {
	if (confirm('Are you sure you want to reset the current game?')) init();
}

var pauseStarted;

function startPause() {
	if ((moving == 0 || moving == 1) && !pauseStarted) {
		stopTimer();
		pauseStarted = new Date();
		document.getElementById('play').style.display = 'none';
		document.getElementById('paused').style.display = 'block';
	}
}

function endPause() {
	document.getElementById('paused').style.display = 'none';
	document.getElementById('play').style.display = 'block';
	var now = new Date();
	LastTouch.setTime(LastTouch.getTime() + (now.getTime() - pauseStarted.getTime()));	
	pauseStarted = false;
	timer = setInterval("update()",400);
}

function confirmExit() {
	if (moving == 0 || moving == 1) {
		startPause();
		return 'Are you sure you want to navagiate away from this page? This will lose the current game.';
	}
}
window.onbeforeunload = confirmExit;

function setCookie(name,value) {
	var date = new Date();
	date.setTime(date.getTime()+(100*24*60*60*1000));
	document.cookie = "bc"+name+"="+value+"; expires="+date.toGMTString();
}

function getCookie(name) {
        var cookieBits = document.cookie.split(';');
        for(var i=0;i < cookieBits.length;i++) {
                var cookie = cookieBits[i];
                while (cookie.charAt(0)==' ') cookie = cookie.substring(1,cookie.length);
                if (cookie.indexOf('bc'+name+'=') == 0) return cookie.substring(1+2+name.length,cookie.length);
	}
}

function onPageLoad() {
	// start time
	var time = getCookie('time');
	if (!isNaN(time) && time > 0) {
		document.getElementById('Hrs').value = parseInt(time / (60*60)); 
		document.getElementById('Mins').value = (parseInt(time / 60)%60);
		document.getElementById('Secs').value = parseInt(time%60);
	}

	if (getCookie('diffTimes') == 'y') {
		document.getElementById('DiffStartTimes').checked = time;
		diffStartTimesForm(true);
		var timerhp = getCookie('timeRHP');
		if (!isNaN(timerhp) && timerhp > 0) {
			document.getElementById('HrsRHP').value = parseInt(timerhp / (60*60));
			document.getElementById('MinsRHP').value = (parseInt(timerhp / 60)%60);
			document.getElementById('SecsRHP').value = parseInt(timerhp%60);
		}
	} else {
		document.getElementById('DiffStartTimes').checked = false;
		diffStartTimesForm(false);
	}

	// fischer
	if (getCookie('fischer') == 'before') {
		document.getElementById('Fischer').checked = true;
	}
	if (getCookie('fischer') == 'after') {
		document.getElementById('Fischer').checked = true;
		document.getElementById('FischerMode').selectedIndex = 1;
	}
	if (getCookie('fischerSecs')) document.getElementById('FischerSecs').value = getCookie('fischerSecs');

	// bronstein
	var b = parseInt(getCookie('bronsteinSecs'));
	if (!isNaN(b) && b > 0) {
		document.getElementById('BronsteinSecs').value = b;
	}
	if (getCookie('bronstein') == 'on') document.getElementById('Bronstein').checked = true;

	// simple delay
        var sd = parseInt(getCookie('simpleDelaySecs'));
        if (!isNaN(sd) && sd > 0) {
                document.getElementById('SimpleDelaySecs').value = sd;
        }
        if (getCookie('simpleDelay') == 'on') document.getElementById('SimpleDelay').checked = true;


	// time warnings
	var warning = parseInt(getCookie('timeWarningSecs'));
	if (!isNaN(warning) && warning > 0) {
		document.getElementById('TimeWarningSecs').value = warning;
		document.getElementById('TimeWarning').checked = true;
	}
        if (getCookie('timeWarning') == 'off') {
                document.getElementById('TimeWarning').checked = false;
        }
	// keyboard layout
	var kbLayout = getCookie('kbLayout');
	if (kbLayout) {
		var ele =  document.getElementById('KbLayout');
		for(var i = 0; i < ele.length; i++) {
			if (ele.options[i].value == kbLayout) {
				ele.selectedIndex = i;
				keyboardLayout = ele.options[i].value;
			} 
		}
	}
}

function diffStartTimesForm(show) {
	if (show) {
		document.getElementById('StartTimeForRightPlayer').style.display = 'block';
		document.getElementById('ForLHSPlayerLabel').style.display = 'inline';
		document.getElementById('HrsRHP').value = document.getElementById('Hrs').value;
		document.getElementById('MinsRHP').value = document.getElementById('Mins').value;
		document.getElementById('SecsRHP').value = document.getElementById('Secs').value;
	} else {
		document.getElementById('StartTimeForRightPlayer').style.display = 'none';
		document.getElementById('ForLHSPlayerLabel').style.display = 'none';
	}
}
</script>
</head>
<body onload="init(); onPageLoad();">

<div id="nojs">
	 Loading, please wait ... 
</div>
<noscript>
	You seem not to have JavaScript enabled. Without it,  <a href="http://code.google.com/p/bobchess/">BobChess</a> will not run. 
</noscript>

<div id="play" style="text-align: center; display: none; height:99%; width: 99%;">
	<input type="button" style=" font-size:300%; width:49%; height:90%; text-align: left; background-color: #222; padding: 10px;" id="player1" onclick="clickPlayer(0);">
	<input type="button" style=" font-size:300%; width:49%; height:90%; text-align: right; background-color: #ccc; padding: 10px;" id="player2" onclick="clickPlayer(1);">
	<br>
	(<a href="#" onclick="reset(); return false;">reset timers</a>) 
	(<a href="#" onclick="startPause(); return false;">pause</a>)
</div>

<div id="start" style="display: none;">
	<h1>bobChess Online Chess Clock</h1>
	<form>
		<fieldset>
			<legend>Instructions</legend>
			<p>Set the options you want below and click "Start". Two buttons will appear, with the times displayed.</p>
			<p>To start the clocks running click on either one of them. The clock you click on will start counting down.</p>
			<p>When a players clock is running, they can press a number or letter key on their side of the keyboard or click their clock with the mouse to end their go and start their opponents clock running.</p>
			<p>There is a pause button on the bottom of the screen.</p>
		</fieldset>
		<fieldset>
			<legend>Start Time</legend>
			<p>Start Time <span id="ForLHSPlayerLabel" style="display: none;">for left hand player</span>: <input type=text id="Hrs" size="2" value="0">hrs:<input type=text id="Mins" size="2" value="5">mins:<input type=text id="Secs" size="2" value="00">secs</p>
			<p id="StartTimeForRightPlayer" style="display: none;">Start Time for right hand player: <input type=text id="HrsRHP" size="2" value="0">hrs:<input type=text id="MinsRHP" size="2" value="5">mins:<input type=text id="SecsRHP" size="2" value="00">secs</p>
			<p><input type="checkbox" id="DiffStartTimes" onclick="diffStartTimesForm(this.checked);"><label for="DiffStartTimes">Different times for each player</label></p>
		</fieldset>
		<fieldset>
			<legend>Mode</legend>
			<p><input type="radio" name="Mode" id="NormalChess" checked="checked"><label for="NormalChess">Normal Chess Clock</label></p>
			<p><input type="radio" name="Mode" id="Fischer"><label for="Fischer">Fischer Clock; add </label><input type="text" id="FischerSecs" value="5" size="2"> seconds <select id="FischerMode"><option value=0>Before</option><option value=1>After</option></select> every move.</p>
			<p><input type="radio" name="Mode" id="SimpleDelay"><label for="SimpleDelay">Simple Delay; every move the clock waits </label><input type="text" id="SimpleDelaySecs" value="5" size="2"> seconds before starting.</p>
			<p><input type="radio" name="Mode" id="Bronstein"><label for="Bronstein">Bronstein Clock; the amount of time the player takes is added to their clock at the end of their move up to a limit of </label><input type="text" name="BronsteinSecs" id="BronsteinSecs" size="2" value="5"> seconds.
		</fieldset>
		<fieldset>
			<legend>Options</legend>
			<p><input type="checkbox" name="TimeWarning" id="TimeWarning" checked="checked"><label for="TimeWarning">Turn clocks red when there is only</label> <input type="text" name=""TimeWarningSecs" id="TimeWarningSecs" value="5" size="2"> seconds left.</p>
			<p>Keyboard Layout: 
			<select id="KbLayout" onchange="keyboardLayout = this.value; setCookie('kbLayout',this.value);">
				<option value="uk-qwerty" selected>UK/USA</option>
				<option value="uk-dvorak">UK/USA Dvorak</option>
			</select> <a href="http://code.google.com/p/bobchess/wiki/KeyboardLayouts" target="_blank">Add More</a></p>
		</fieldset>
		<p><input value="Start The Match" type=submit onclick="startMatch(); return false;"></p>
	</form>
	<p><em>This is open souce. <a href="http://code.google.com/p/bobchess/">Find out more here</a>. If you want to download a copy of this program to use when not connected to the internet, simply select 'file' and 'save' in your web browser.</em></p>
</div>

<div id="paused" style=" display: none; text-align: center;">
	The clocks are paused. <a href="#" onclick="endPause(); return false;">Start clocks again</a>.
</div>


</body>
</html>
